package com.dh.game.vo.message;

enum EChannel {
	SYSTEM_MESSAGE = 0;
	CHAT_WORLD = 1; //世界聊天
	CHAT_LEGION = 2; //军团聊天
	CHAT_TEAM = 3; //队伍聊天
	CHAT_SPEAK = 4; //喇叭
	SYSTME_NOTICE = 5; //公告
	CHAT_ROOM = 6; //私聊
}

message ChatRequest {
	required EChannel eChannel = 1; //发送消息的频道	 【消息值 频道1：世界 频道2军团 频道3：队伍  频道4：喇叭】
	required string msg = 2; //发送消息的内容
	optional int32 commonId = 8; //通用id,所有int类型都可使用
	optional CommonType commonType = 9; //通过这里可以判断commonId具体是什么Id
}

message ChatResponse {
	required EChannel eChannel = 1; //发送者发送的频道	【消息值 频道0：系统消息 频道1：世界 频道2：势力 频道3：军团 频道4：队伍】
	optional int32 sex = 2; //发送者的性别		【0=女】
	optional string name = 3; //发送者的昵称
	optional int32 vip = 4; //发送者的vip		【0=vip0】
	required string msg = 5; //发送者发送的内容
	optional int32 dateTime = 6; //时间
	optional int32 commonId = 8; //通用id,所有int类型都可使用
	optional CommonType commonType = 9; //通过这里可以判断commonId具体是什么Id
	optional int32 loc = 10 [default = 0]; //显示位置[0默认值,1为只显示跑马灯不显示聊天窗]
}

enum CommonType {
	LEGION_ID = 1; //帮会ID
	PLAYER_ID = 2; //资源点Id
}

message SysNoticeResponse {
	required string content = 1; //系统提示
}
//**喇叭通知 */
message HornNoticeResponse {
	optional int32 cfgId = 1; //喇叭物品Id,由于以后有不同装饰需要传回
	optional int32 sex = 2; //发送者的性别		【0=女】
	optional string name = 3; //发送者的昵称
	optional int32 vip = 4; //发送者的vip		【0=vip0】
	optional string content = 5; //发送者发送的内容
	optional int64 dateTime = 6; //时间
	optional string legionname = 7; //军团名称
}

//好友聊天请求
message FriendChatRequest {
	required int32 playerId = 1; //接收者玩家ID
	required string frName = 2; //接收者的昵称
	required string msg = 3; //发送消息的内容
}
//好友聊天请求回应
message FriendChatResponse {
	required int64 dateTime = 1; //
	required string msg = 2; //发送者发送的内容
	optional string name = 3; //发送者的昵称
	optional string frName = 4; //接收者的昵称
}
//军团聊天成员列表
message LegionMemChatResponse {
	optional string proclamation = 1; //公告
	repeated LegionMemChatInfo legionMemChatInfo = 2; //成员
	optional int32 maxAmount = 3; //该等级最大成员量
}

message LegionMemChatInfo {
	required int32 Type = 1; //成员职位(参看LegionManageproto);
	required int32 isOnline = 2; //是否在线(1为在线)
	required string name = 3; //成员名字
}

//////-------------邮件消息
message MailInfo {
	required int32 id = 1; //邮件ID
	optional string title = 2; //邮件标题
	optional string content = 3; //邮件内容
	optional int32 recvTime = 4; //邮件接收时间
	optional Rewards rewards = 5; //奖励附件,可以有多组
	optional int32 lifeTime = 6; //邮件生命时间(unit:s),如果-1代表永久,其它范围为0-10天
	optional int32 isRead = 7; //邮件类型
	optional int32 isReward = 8; //是否奖励
	optional string senderName = 9; //发送者名字
}

enum eMailError {
	MAIL_OK = 1; //处理成功
	MAIL_FAIL = 2; //处理失败
}
//查询邮件列表
message MailListRequest {
	optional int32 pageCount = 1; //获取第几页页码,默认为0,即第一页
}

message MailListResponse {
	repeated MailInfo mailList = 1; //获取邮件列表
	required int32 pageCount = 3; //获取第几页页码,默认为0,即第一页
	required int32 totalPage = 4; //总页数
}
//查询附件列表
message AttachmentMailRequest {
	optional int32 pageCount = 1; //获取第几页页码,默认为0,即第一页
}

//修改邮件状态
message MarkReadRequest {
	optional int32 id = 1; //邮件ID
}

//提取邮件奖励请求
message RewardedRequest {
	repeated int32 id = 1; //提取奖励邮件ID列表
}

//提取邮件奖励回应
message RewardedResponse {
	repeated MailInfo mailInfo = 1; //提取后新邮件
}
//删除邮件请求
message MailDelRequest {
	required int32 pageCount = 1; //获取第几页页码,默认为0,即第一页
	repeated int32 ids = 2; //邮件ID
}

//删除邮件回应
message MailDelResponse {
	optional eMailError errorCode = 1; //错误消息
	repeated MailInfo mailInfo = 2; //新追加邮件
	required int32 pageCount = 3; //当前页码
	required int32 totalPage = 4; //邮件页数
}

message Rewards {
	repeated Reward rewards = 1; //奖励附件,可以有多组
}

message Reward {
	optional int32 type = 1;
	optional int32 content = 2; //对于类型1,这里直接传递物品cfgId
	optional int32 number = 3; //奖励数量;
}
//新邮件提醒
message NewMailResponse {
	optional int32 newMail = 1; //新邮件未读数提醒,1代表有未读邮件
}

