package com.dh.util;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

import com.dh.game.vo.base.Reward;

public class CodeTool {

	public static String arrayToString(int[] array, String splitor) {
		StringBuilder s = new StringBuilder();
		for (int i : array) {
			s.append(i).append(splitor);
		}
		return s.toString();
	}

	public static int[] StringToIntArray(String dayDoneStr, String splitor) {
		String[] array = dayDoneStr.split(splitor);
		int[] intArray = new int[array.length];
		for (int i = 0; i < array.length; i++) {
			intArray[i] = Integer.parseInt(array[i]);
		}
		return intArray;
	}

	/**
	 * 空判定
	 * 
	 * @param list
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public static boolean isEmpty(List list) {
		if (list == null || list.size() == 0) {
			return true;
		}
		return false;
	}

	public static boolean isEmpty(String str) {
		if (str == null || str.trim().length() == 0) {
			return true;
		}
		return false;
	}

	@SuppressWarnings("rawtypes")
	public static boolean isNotEmpty(List list) {
		if (list == null || list.size() == 0) {
			return false;
		}
		return true;
	}

	public static boolean isNotEmpty(String str) {
		if (str == null || str.trim().length() == 0) {
			return false;
		}
		return true;
	}

	public static int equalsZero(int value, int limit, int result) {
		if (value == limit) {
			return result;
		}
		return value;
	}

	public static String getSetValue(Set<String> set, int n) {
		int i = 0;
		for (String str : set) {
			if (i == n) {
				return str;
			}
			i++;
		}
		return null;
	}

	/**
	 * 将char强转为byte只留下低八位
	 * 
	 * @param chars
	 * @return
	 */
	public static byte[] transCharsTobytes(char[] chars) {
		byte[] byteArray = new byte[chars.length];
		for (int i = 0; i < byteArray.length; i++) {
			byteArray[i] = (byte) chars[i];
		}

		return byteArray;
	}

	public static char[] decodeStrToChars(String str) {
		char[] charArray = str.toCharArray();
		return charArray;
	}

	public static String encodeCharsToStr(char[] chars) {
		return new String(chars);
	}

	public static byte[] decodeStrToBytes(String str) {
		return str.getBytes();

	}

	public static String encodeBytesToStr(byte[] bytes) {
		return new String(bytes);
	}

	/**
	 * 融合同类型reward
	 * 
	 * @param rewards
	 * @return
	 */
	public static List<Reward> mergeReward(List<Reward> rewards) {
		List<Reward> newRList = new ArrayList<Reward>();
		if (rewards == null || rewards.isEmpty()) {
			return newRList;
		}
		for (Reward reward : rewards) {
			boolean notExist = true;
			for (Reward newReward : newRList) {
				if (reward.getType() == newReward.getType()) {
					newReward.setNumber(newReward.getNumber() + reward.getNumber());
					notExist = false;
					break;
				}
			}
			if (notExist) {
				newRList.add(reward);
			}
		}
		return newRList;
	}

}
