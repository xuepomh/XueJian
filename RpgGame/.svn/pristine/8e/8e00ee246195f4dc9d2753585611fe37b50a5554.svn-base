package com.dh.service;

import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Component;

import com.dh.constants.GameRecordConstants;
import com.dh.dao.WelfareMapper;
import com.dh.game.vo.activity.ActivityProto.GiftGoldInfo;
import com.dh.game.vo.activity.ActivityProto.WelfareInfo;
import com.dh.game.vo.activity.ActivityProto.WelfareResp;
import com.dh.game.vo.activity.ActivityProto.WelfareValue;
import com.dh.game.vo.base.BaseActivityVO;
import com.dh.game.vo.base.BaseWelfareVO;
import com.dh.game.vo.base.DymicGiftVO;
import com.dh.game.vo.user.PlayerDymicGiftVO;
import com.dh.game.vo.user.PlayerWelfareVO;
import com.dh.resconfig.WelfareRes;
import com.dh.sqlexe.SqlSaveThread;
import com.dh.util.DateUtil;
import com.dh.util.SqlBuild;
import com.dh.vo.user.UserCached;

@Component
public class WelfareService {
	private static final Logger LOGGER = Logger.getLogger(WelfareService.class);
	@Resource
	private SqlBuild sqlBuild;
	@Resource
	private SqlSaveThread sqlSaveThread;
	@Resource
	private WelfareMapper welfareMapper;

	public void loadWelfare(UserCached userCached) {
		PlayerWelfareVO playerWelfareVO = welfareMapper.getPlayerWelfareVO(userCached.getPlayerId());
		if (playerWelfareVO == null) {
			playerWelfareVO = new PlayerWelfareVO();
			playerWelfareVO.setPlayerId(userCached.getPlayerId());
			playerWelfareVO.setFirstrecharge(0);
			playerWelfareVO.setLvrew(0);
			playerWelfareVO.setSevrew(0);
			playerWelfareVO.setRechargerew(0);

			sqlSaveThread.putSql(playerWelfareVO.getPlayerId(), sqlBuild.getSql("com.dh.dao.WelfareMapper.insertPlayerWelfareVO", playerWelfareVO));
		}
		userCached.getUserActivity().setPlayerWelfareVO(playerWelfareVO);

		List<PlayerDymicGiftVO> list = welfareMapper.getPlayerDymicGift(userCached.getPlayerId());
		if (list != null) {
			userCached.getUserActivity().getPlayerDymicGiftList().addAll(list);
		}
	}

	public void updatePlayerWelfareVO(PlayerWelfareVO playerWelfareVO) {
		sqlSaveThread.putSql(playerWelfareVO.getPlayerId(), sqlBuild.getSql("com.dh.dao.WelfareMapper.updatePlayerWelfareVO", playerWelfareVO));
	}

	/**
	 * @param baseActivityVO
	 * 
	 * @return
	 */
	private static boolean isStart(BaseActivityVO baseActivityVO) {
		if (baseActivityVO.getState() == 0) {
			return false;
		}

		long curTime = System.currentTimeMillis();
		if (curTime < baseActivityVO.getBegin_time().getTime() || curTime > baseActivityVO.getEnd_time().getTime()) {
			return false;
		}

		return true;
	}

	// 福利大厅数据
	public WelfareResp.Builder getWelfareResp(int label, UserCached userCached, int type) throws Exception {
		WelfareResp.Builder welfareResp = WelfareResp.newBuilder();
		PlayerWelfareVO playerWelfareVO = userCached.getUserActivity().getPlayerWelfareVO();

		for (BaseActivityVO baseActivityVO : GameRecordConstants.ACTIVITYLIST) {
			if (!isStart(baseActivityVO)) {
				continue;
			}

			if (label != -1) {
				if (WelfareRes.getLabelByType(baseActivityVO.getId()) != label) {
					continue;
				}
			}

			if (type > 0) {
				if (baseActivityVO.getId() != type) {
					continue;
				}
			}

			if (baseActivityVO.getId() == WelfareRes.LEVEL_REWARD) {
				levelWelfare(welfareResp, userCached, playerWelfareVO, baseActivityVO);
			}

			else if (baseActivityVO.getId() == WelfareRes.LOGIN_REWARD) {
				loginWelfare(welfareResp, userCached, playerWelfareVO, baseActivityVO);
			}

			else if (baseActivityVO.getId() == WelfareRes.RECHARGE_REWARD) {
				rechargeBack(welfareResp, userCached, playerWelfareVO, baseActivityVO);
			}

			else if (baseActivityVO.getId() == WelfareRes.FIRST_RECHARG) {
				firstRecharge(welfareResp, userCached, playerWelfareVO, baseActivityVO);
			}

			else if (baseActivityVO.getId() >= 11 && baseActivityVO.getId() < 80) {
				xianzu(welfareResp, userCached, playerWelfareVO, baseActivityVO);
			}

			else if (baseActivityVO.getId() >= 90 && baseActivityVO.getId() <= 100) {
				dymicGift(welfareResp, userCached, playerWelfareVO, baseActivityVO);
			}

		}

		GiftGoldInfo.Builder giftGoldInfo = GiftGoldInfo.newBuilder();

		List<DymicGiftVO> DymicGiftVOList = GameRecordConstants.findDymicGiftList(userCached.getPlayerId());
		int giftGold = 0;
		int giftNum = 0;
		if (DymicGiftVOList != null && DymicGiftVOList.size() > 0) {
			for (DymicGiftVO dymicGiftVO : DymicGiftVOList) {
				giftGold = giftGold + dymicGiftVO.getCgiftGold() - dymicGiftVO.getLingiftGold();
				giftNum += dymicGiftVO.getNum();
			}
		}
		giftGoldInfo.setGiftGold(giftGold);
		giftGoldInfo.setGiftnum(giftNum);
		welfareResp.setGiftGoldInfo(giftGoldInfo);

		return welfareResp;
	}

	public void levelWelfare(WelfareResp.Builder welfareResp, UserCached userCached, PlayerWelfareVO playerWelfareVO, BaseActivityVO baseActivityVO) {
		// 等级奖励
		WelfareInfo.Builder welfareInfo = WelfareInfo.newBuilder();
		welfareInfo.setType(WelfareRes.LEVEL_REWARD);
		welfareInfo.setTimetype(baseActivityVO.getTime_type());
		int n = 0;
		for (BaseWelfareVO baseWelfareVO : WelfareRes.getInstance().LEVELLIST) {
			WelfareValue.Builder welfareValue = WelfareValue.newBuilder();
			welfareValue.setIndex(n + 1);
			int x = (playerWelfareVO.getLvrew() >> n) & 1;
			if (x == 1) { // 领过了
				welfareValue.setVal(x);
			} else {
				if (userCached.getPlayerVO().getLevel() >= baseWelfareVO.getFinished()) {
					welfareValue.setVal(0);
				} else {
					welfareValue.setVal(-1);
				}
			}

			n++;
			welfareInfo.addWelfareValue(welfareValue);
		}
		welfareResp.addWelfareInfo(welfareInfo);
	}

	public void loginWelfare(WelfareResp.Builder welfareResp, UserCached userCached, PlayerWelfareVO playerWelfareVO, BaseActivityVO baseActivityVO) {
		// 登陆天数奖励
		WelfareInfo.Builder welfareInfo = WelfareInfo.newBuilder();
		welfareInfo.setType(WelfareRes.LOGIN_REWARD);
		welfareInfo.setTimetype(baseActivityVO.getTime_type());
		int n = 0;
		for (BaseWelfareVO baseWelfareVO : WelfareRes.getInstance().LOGINLIST) {
			WelfareValue.Builder welfareValue = WelfareValue.newBuilder();
			welfareValue.setIndex(n + 1);
			int x = (playerWelfareVO.getSevrew() >> n) & 1;
			if (x == 1) { // 领过了
				welfareValue.setVal(x);
			} else {
				if (userCached.getPlayerVO().getScores() >= baseWelfareVO.getFinished()) {
					welfareValue.setVal(0);
				} else {
					welfareValue.setVal(-1);
				}
			}

			n++;
			welfareInfo.addWelfareValue(welfareValue);
		}
		welfareResp.addWelfareInfo(welfareInfo);

	}

	public void rechargeBack(WelfareResp.Builder welfareResp, UserCached userCached, PlayerWelfareVO playerWelfareVO, BaseActivityVO baseActivityVO) {
		// 充值
		WelfareInfo.Builder welfareInfo = WelfareInfo.newBuilder();
		welfareInfo.setType(WelfareRes.RECHARGE_REWARD);
		welfareInfo.setTimetype(baseActivityVO.getTime_type());
		welfareInfo.setCurvalue(userCached.getPlayerAccountVO().getHisrecharge());
		int n = WelfareRes.getInstance().RECHARGELIST.size();
		for (int i = 0; i < n; i++) {
			WelfareValue.Builder welfareValue = WelfareValue.newBuilder();
			welfareValue.setIndex(i + 1);
			welfareValue.setVal(-1);
			int x = (playerWelfareVO.getRechargerew() >> i) & 1;
			if (x == 1) {
				welfareValue.setVal(1);
			} else {
				BaseWelfareVO baseWelfareVO = WelfareRes.getInstance().RECHARGELIST.get(i);
				if (userCached.getPlayerAccountVO().getHisrecharge() >= baseWelfareVO.getFinished()) {
					welfareValue.setVal(0);
				} else {
					welfareValue.setVal(-1);
				}
			}
			// welfareInfo.addVal(x);
			welfareInfo.addWelfareValue(welfareValue);
		}
		welfareResp.addWelfareInfo(welfareInfo);
	}

	public void firstRecharge(WelfareResp.Builder welfareResp, UserCached userCached, PlayerWelfareVO playerWelfareVO, BaseActivityVO baseActivityVO) {
		// 首冲
		WelfareInfo.Builder welfareInfo = WelfareInfo.newBuilder();
		welfareInfo.setType(WelfareRes.FIRST_RECHARG);
		welfareInfo.setTimetype(baseActivityVO.getTime_type());
		WelfareValue.Builder welfareValue = WelfareValue.newBuilder();
		welfareValue.setIndex(1);
		welfareValue.setVal(-1);

		if (playerWelfareVO.getFirstrecharge() > 0) {
			welfareValue.setVal(1);
		} else if (userCached.getPlayerAccountVO().getHisrecharge() > 0) {
			welfareValue.setVal(0);
		}

		welfareInfo.addWelfareValue(welfareValue);
		welfareResp.addWelfareInfo(welfareInfo);
	}

	public void xianzu(WelfareResp.Builder welfareResp, UserCached userCached, PlayerWelfareVO playerWelfareVO, BaseActivityVO baseActivityVO) {
		WelfareInfo.Builder welfareInfo = WelfareInfo.newBuilder();
		welfareInfo.setType(baseActivityVO.getId());
		welfareInfo.setTimetype(baseActivityVO.getTime_type());
		if (baseActivityVO.getTime_type() == 1) { // 有时效的
			welfareInfo.setStartdate(DateUtil.formatDate(baseActivityVO.getBegin_time()));
			welfareInfo.setEnddate(DateUtil.formatDate(baseActivityVO.getEnd_time()));
		}

		int finalvalue = 0;

		welfareInfo.setStartdate(DateUtil.formatDate(baseActivityVO.getBegin_time()));
		welfareInfo.setEnddate(DateUtil.formatDate(baseActivityVO.getEnd_time()));
		switch (baseActivityVO.getId()) {
		case WelfareRes.ZAO_MU10:// 全服累计十连抽达到500次
			finalvalue = GameRecordConstants.TENZAOMU_VALUE.intValue();
			break;
		case WelfareRes.JJCTZ:// 全服竞技场挑战达到1000次
			finalvalue = GameRecordConstants.JJCTZ_VALUE.intValue();
			break;
		case WelfareRes.ENHANCE:// 全服装备强化达到1000次
			finalvalue = GameRecordConstants.ENHANCE_VALUE.intValue();
			break;
		case WelfareRes.HEROUPLEVEL:// 全服英雄升级达到1000次
			finalvalue = GameRecordConstants.HEROUPLEVEL_VALUE.intValue();
			break;
		case WelfareRes.VIP1:// 全服vip1数量达到200个
			finalvalue = GameRecordConstants.VIP1NUM_VALUE.intValue();
			break;
		case WelfareRes.VIP4:// 全服vip4数量达到50个
			finalvalue = GameRecordConstants.VIP4NUM_VALUE.intValue();
			break;
		case WelfareRes.VIP7:// 全服vip7数量达到30个
			finalvalue = GameRecordConstants.VIP7NUM_VALUE.intValue();
			break;
		case WelfareRes.VIP8:// 全服vip8数量达到20个
			finalvalue = GameRecordConstants.VIP8NUM_VALUE.intValue();
			break;
		case WelfareRes.VIP9:// 全服vip9数量达到20个
			finalvalue = GameRecordConstants.VIP9NUM_VALUE.intValue();
			break;
		case WelfareRes.VIP10:// 全服vip10数量达到20个
			finalvalue = GameRecordConstants.VIP10NUM_VALUE.intValue();
			break;
		}
		welfareInfo.setCurvalue(finalvalue);

		List<BaseWelfareVO> list = WelfareRes.getInstance().getSXJZ(baseActivityVO.getId());

		int n = 0;
		for (BaseWelfareVO baseWelfareVO : list) {
			n++;
			WelfareValue.Builder welfareValue = WelfareValue.newBuilder();
			welfareValue.setIndex(n);
			welfareValue.setVal(-1);
			int ssid = baseWelfareVO.getType() * 100 + baseWelfareVO.getNum();
			if (baseActivityVO.getDayreset() == 1) { // 每日刷新
				if (finalvalue >= baseWelfareVO.getFinished()) {
					PlayerDymicGiftVO playerDymicGiftVO = userCached.getUserActivity().findDymicGift(ssid, 1, 0);
					if (playerDymicGiftVO != null && DateUtil.isSameDay(playerDymicGiftVO.getRewarddate())) {
						welfareValue.setVal(1);
					} else {
						if (userCached.getPlayerVO().getVip() < baseWelfareVO.getVip_levelmin()) {
							// VIP等级不够
						} else {
							welfareValue.setVal(0);
						}

					}
				}
			} else { // 一次性
				if (finalvalue >= baseWelfareVO.getFinished()) {
					PlayerDymicGiftVO playerDymicGiftVO = userCached.getUserActivity().findDymicGift(ssid, 1, 0);
					if (playerDymicGiftVO != null) {
						welfareValue.setVal(1);
					} else {
						if (userCached.getPlayerVO().getVip() < baseWelfareVO.getVip_levelmin()) {
							// VIP等级不够
						} else {
							welfareValue.setVal(0);
						}
					}
				}
			}

			// if (gameRecordVO.getValue1() >= gameRecordVO.getValue2()) {
			// PlayerDymicGiftVO playerDymicGiftVO =
			// userCached.getUserActivity().findDymicGift(gameRecordVO.getId());
			// if (playerDymicGiftVO != null &&
			// DateUtil.isSameDay(playerDymicGiftVO.getRewarddate())) {
			// welfareACC.setVal(playerDymicGiftVO.getState());
			// }
			// }

			welfareInfo.addWelfareValue(welfareValue);
		}

		welfareResp.addWelfareInfo(welfareInfo);
	}

	public void dymicGift(WelfareResp.Builder welfareResp, UserCached userCached, PlayerWelfareVO playerWelfareVO, BaseActivityVO baseActivityVO) {
		WelfareInfo.Builder welfareInfo = WelfareInfo.newBuilder();
		welfareInfo.setType(baseActivityVO.getId());
		welfareInfo.setTimetype(baseActivityVO.getTime_type());

		int finalvalue = 0;
		if (baseActivityVO.getTime_type() == 1) { // 有时效的
			welfareInfo.setStartdate(DateUtil.formatDate(baseActivityVO.getBegin_time()));
			welfareInfo.setEnddate(DateUtil.formatDate(baseActivityVO.getEnd_time()));
			switch (baseActivityVO.getId()) {

			case WelfareRes.DYMICVIP1:
				finalvalue = GameRecordConstants.VIP1NUM_VALUE.intValue();
				break;
			case WelfareRes.DYMICVIP4:
				finalvalue = GameRecordConstants.VIP4NUM_VALUE.intValue();
				break;
			case WelfareRes.DYMICVIP7:
				finalvalue = GameRecordConstants.VIP7NUM_VALUE.intValue();
				break;
			case WelfareRes.DYMICVIP8:
				finalvalue = GameRecordConstants.VIP8NUM_VALUE.intValue();
				break;
			case WelfareRes.DYMICVIP9:
				finalvalue = GameRecordConstants.VIP9NUM_VALUE.intValue();
				break;
			case WelfareRes.DYMICVIP10:
				finalvalue = GameRecordConstants.VIP10NUM_VALUE.intValue();
				break;
			}
			welfareInfo.setCurvalue(finalvalue);
		}

		List<BaseWelfareVO> baseWelfareVOList = WelfareRes.getInstance().getHuangGuaGifByType(baseActivityVO.getId());
		List<DymicGiftVO> list = GameRecordConstants.DYMICGIFTLIST;

		int vipLevel = userCached.getPlayerVO().getVip();
		for (DymicGiftVO dymicGiftVO : list) {
			BaseWelfareVO baseWelfareVO = baseWelfareVOList.get(0);
			if (dymicGiftVO.getVip() != baseWelfareVO.getFinished()) {
				continue;
			}

			int ssid = dymicGiftVO.getPlayerId();

			PlayerDymicGiftVO playerDymicGiftVO1 = userCached.getUserActivity().findDymicGift(ssid, 1, dymicGiftVO.getVip());
			PlayerDymicGiftVO playerDymicGiftVO2 = userCached.getUserActivity().findDymicGift(ssid, 2, dymicGiftVO.getVip());
			PlayerDymicGiftVO playerDymicGiftVO3 = userCached.getUserActivity().findDymicGift(ssid, 3, dymicGiftVO.getVip());

			if (playerDymicGiftVO1 == null || playerDymicGiftVO2 == null || playerDymicGiftVO3 == null) {
				WelfareValue.Builder welfareValue = WelfareValue.newBuilder();
				welfareValue.setIndex(dymicGiftVO.getPlayerId());
				welfareValue.setName(dymicGiftVO.getNick());
				welfareValue.setVal(0);

				baseWelfareVO = baseWelfareVOList.get(0);
				// -1未达成 0可领取 1已领取
				if (playerDymicGiftVO1 == null) {
					if (vipLevel >= baseWelfareVO.getVip_levelmin()) {
						welfareValue.addStateval(0);
					} else {
						welfareValue.addStateval(-1);
					}
				} else {
					welfareValue.addStateval(1);
				}

				baseWelfareVO = baseWelfareVOList.get(1);
				if (playerDymicGiftVO2 == null) {
					if (vipLevel >= baseWelfareVO.getVip_levelmin()) {
						welfareValue.addStateval(0);
					} else {
						welfareValue.addStateval(-1);
					}
				} else {
					welfareValue.addStateval(1);
				}

				baseWelfareVO = baseWelfareVOList.get(2);
				if (playerDymicGiftVO3 == null) {
					if (vipLevel >= baseWelfareVO.getVip_levelmin()) {
						welfareValue.addStateval(0);
					} else {
						welfareValue.addStateval(-1);
					}
				} else {
					welfareValue.addStateval(1);
				}

				welfareInfo.addWelfareValue(welfareValue);
			}

		}

		welfareResp.addWelfareInfo(welfareInfo);
	}

	public void addDymicGiftName(DymicGiftVO dymicGiftVO) {
		if (!GameRecordConstants.DYMICGIFTLIST.contains(dymicGiftVO)) {
			GameRecordConstants.DYMICGIFTLIST.add(dymicGiftVO);
			sqlSaveThread.putSql(dymicGiftVO.getPlayerId(), sqlBuild.getSql("com.dh.dao.WelfareMapper.addDymicGiftName", dymicGiftVO));
		}
	}

	public void updateDymicGiftName(DymicGiftVO dymicGiftVO) {
		sqlSaveThread.putSql(dymicGiftVO.getPlayerId(), sqlBuild.getSql("com.dh.dao.WelfareMapper.updateDymicGiftName", dymicGiftVO));
	}

	public void updatePlayerDymicGift(PlayerDymicGiftVO playerDymicGiftVO) {
		sqlSaveThread.putSql(playerDymicGiftVO.getPlayerId(), sqlBuild.getSql("com.dh.dao.WelfareMapper.updatePlayerDymicGift", playerDymicGiftVO));
	}

	public void insertPlayerDymicGift(UserCached userCached, PlayerDymicGiftVO playerDymicGiftVO) {
		if (userCached.getUserActivity().findDymicGift(playerDymicGiftVO.getGifPlayerId(), playerDymicGiftVO.getState(), playerDymicGiftVO.getVip()) == null) {
			userCached.getUserActivity().getPlayerDymicGiftList().add(playerDymicGiftVO);
			sqlSaveThread.putSql(playerDymicGiftVO.getPlayerId(), sqlBuild.getSql("com.dh.dao.WelfareMapper.insertPlayerDymicGift", playerDymicGiftVO));
		}
	}

	public static void main(String[] args) throws Exception {
		int a = 40 + (1 << 2);
		System.out.println(Integer.toBinaryString(a));

		int b = (a >> 2) & 1;
		System.out.println(b);

		int c = (1 << 3);
		System.out.println("c = " + c);
	}

}
