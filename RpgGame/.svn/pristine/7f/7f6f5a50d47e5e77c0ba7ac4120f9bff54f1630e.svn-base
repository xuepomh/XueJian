package com.dh.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URI;
import java.net.URL;

import org.apache.log4j.Logger;
import org.springframework.context.ApplicationContext;

import taskscript.TaskCheckImp;

import com.dh.handler.task.TaskCheck;

public class MyClassLoaderUtil extends ClassLoader {
	public final static Logger logger = Logger.getLogger(MyClassLoaderUtil.class);
	private final static String TASKCHECK = "taskscript/TaskCheckImp";

	private static MyClassLoaderUtil INSTANCE = new MyClassLoaderUtil();

	private volatile TaskCheck taskCheck = null;
	private ApplicationContext act = null;
	private long lastUpdateTime = System.currentTimeMillis();
	private MyLong oldLength = new MyLong(0);

	public void loadTaskCheck() {
		String osName = System.getProperty("os.name");
		if (osName.startsWith("Windows")) {
			taskCheck = new TaskCheckImp();
		} else {
			loadTaskCheck1();
		}
	}

	public void loadTaskCheck1() {
		try {
			if (taskCheck == null) {
				oldLength = new MyLong(0);
			}
			Class<?> clz = new DynamicClassLoader().loadMyClass(TASKCHECK, oldLength);
			if (clz == null) {
				lastUpdateTime = System.currentTimeMillis();
				return;
			}
			taskCheck = null;
			taskCheck = (TaskCheck) clz.newInstance();
			taskCheck.init(act);
			System.out.println("hashcode + " + taskCheck.hashCode());
		} catch (Exception e) {
			logger.error("loadTaskCheck error ", e);
		}
	}

	public void loadApplicationContext(ApplicationContext at) {
		act = at;
	}

	public static MyClassLoaderUtil getInstance() {
		return INSTANCE;
	}

	private MyClassLoaderUtil() {

	}

	public TaskCheck getTaskCheck() {

		if (taskCheck == null || (System.currentTimeMillis() - lastUpdateTime > 20000L)) {
			synchronized (this) {
				if (taskCheck == null || (System.currentTimeMillis() - lastUpdateTime > 20000L)) {
					loadTaskCheck();
					lastUpdateTime = System.currentTimeMillis();
				}
			}
		}
		return taskCheck;
	}

	public static void main(String[] args) throws Exception {

	}

	public static void test(Integer tt) {
	}
}

class MyLong {
	private long filesize = 0;

	public MyLong(long value) {
		filesize = value;
	}

	public long getFilesize() {
		return filesize;
	}

	public void setFilesize(long filesize) {
		this.filesize = filesize;
	}
}

class DynamicClassLoader extends ClassLoader {

	public Class<?> loadMyClass(String dir, MyLong oldLength) throws Exception {
		URL url = MyClassLoaderUtil.class.getClassLoader().getResource(dir + ".class");
		return this.loadDirectly(url.toURI(), dir, oldLength);
	}

	private Class<?> loadDirectly(URI name, String dir, MyLong oldLength) throws Exception {
		Class<?> cls = null;
		File classF = new File(name);
		MyClassLoaderUtil.logger.debug(name.toString() + "文件大小 = " + classF.length() + "," + oldLength.getFilesize());
		if (oldLength.getFilesize() == classF.length()) {
			return null;
		}

		oldLength.setFilesize(classF.length());
		cls = instantiateClass(dir.replaceAll("/", "."), new FileInputStream(classF), classF.length());
		return cls;
	}

	private Class<?> instantiateClass(String name, InputStream fin, long len) throws Exception {
		byte[] raw = new byte[(int) len];
		fin.read(raw);
		fin.close();
		return defineClass(name, raw, 0, raw.length);
	}
}
