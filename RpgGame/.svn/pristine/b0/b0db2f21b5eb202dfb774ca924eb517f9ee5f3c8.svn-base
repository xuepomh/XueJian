package com.dh.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URI;
import java.net.URL;

import org.apache.log4j.Logger;

import com.dh.handler.task.TaskCheck;

public class MyClassLoaderUtil extends ClassLoader {
	private final static Logger logger = Logger.getLogger(MyClassLoaderUtil.class);
	private final static String TASKCHECK = "taskscript/TaskCheckImp";

	private static MyClassLoaderUtil INSTANCE = new MyClassLoaderUtil();

	private volatile TaskCheck taskCheck = null;

	public void loadTaskCheck() {
		try {
			Class<?> clz = new DynamicClassLoader().loadMyClass(TASKCHECK);
			taskCheck = (TaskCheck) clz.newInstance();
		} catch (Exception e) {
			logger.error("loadTaskCheck error ", e);
		}
	}

	public static MyClassLoaderUtil getInstance() {
		return INSTANCE;
	}

	private MyClassLoaderUtil() {

	}

	public TaskCheck getTaskCheck() {
		return taskCheck;
	}

	public static void main(String[] args) throws Exception {
	}
}

class DynamicClassLoader extends ClassLoader {

	public Class<?> loadMyClass(String dir) throws Exception {
		URL url = MyClassLoaderUtil.class.getClassLoader().getResource(dir + ".class");
		return this.loadDirectly(url.toURI(), dir);
	}

	private Class<?> loadDirectly(URI name, String dir) throws Exception {
		Class<?> cls = null;
		File classF = new File(name);
		cls = instantiateClass(dir.replaceAll("/", "."), new FileInputStream(classF), classF.length());
		return cls;
	}

	private Class<?> instantiateClass(String name, InputStream fin, long len) throws Exception {
		byte[] raw = new byte[(int) len];
		fin.read(raw);
		fin.close();
		return defineClass(name, raw, 0, raw.length);
	}
}
